---
title: How to Updo
subtitle: Examples of projects converted to Updo
tags: haskell, build
---

From the examples[#]_, starting with build tools.

.. [#] Find examples as `github/up-do <up-do_>`_ repositories


Converting Stack
================

Before the conversion[#]_, Stack could already be built with Stack itself and with
Cabal:

    .. code-block:: pre

        .
        ├── cabal.config          ▨ generated by stack
        ├── cabal.project         ▨ only set up is local packages and compiler
        ├── stack-ghc-9.4.5.yaml  ▨ resolver lts-21.2
        ├── stack-ghc-9.6.2.yaml  ▨ resolver nightly-2023-07-15
        └── stack.yaml            ▨ resolver lts-20.23 (ghc-9.2.7)

.. [#] At `up-do/stack <stack_>`_, branch `add/updo-1.0.0 <stack-1_>`_ is an
    Updo conversion from `commercialhaskell/stack@68bc70 <stack-1-fork_>`_
    bootstrapped with ``updo-1.0.0`` from hackage.

Notice the ``stack-ghc-x.y.z.yaml`` naming convention for projects.

.. note::

    Updo uses a ``ghc-x.y.z`` naming convention for ``.INTERMEDIATE`` projects
    that get copied to default and upgrade projects:
    
        .. code-block:: pre

            ├── cabal.project
            ├── cabal.upgrade.project
            ├── stack.yaml
            └── stack.upgrade.yaml

    Substituting for ``x.y.z`` version numbers, the ``.INTERMEDIATE`` targets
    are valid make targets you can build:

        .. code-block:: bash

            $ make -f project-files.mk ghc-x.y.z.dhall2config.project
            $ make -f project-files.mk ghc-x.y.z.dhall2cabal.project
            $ make -f project-files.mk ghc-x.y.z.dhall2stack.yaml

    Note also that there's two ways to generate Cabal projects; ``dhall2config``
    uses imports while ``dhall2cabal`` puts everything in the one file.
    Side by side, ``dhall2cabal`` and ``dhall2stack``,  are very similar.

We have to look inside ``stack.yaml``, find the resolver field, and use this in
a `stackage lookup <stackage-lookup_>`_ to find the compiler version for the
default project. The ``cabal.project`` file setup is minimal and shows the
compiler version in the ``with-compiler`` field.

    .. code-block:: yaml

        with-compiler: ghc-9.2.7
        import: cabal.config
        packages: .

Package version constraints imported from ``cabal.config`` are generated and
because of this includes the version of the sole local package, ``stack
==2.12.0``.

    .. code-block:: bash

        $ stack ls dependencies cabal > cabal.config

After conversion we can build Stack with Stack itself and with Cabal:

.. code-block:: pre

    $ cabal build all --enable-tests --enable-benchmarks
    Resolving dependencies...
    Build profile: -w ghc-9.2.7 -O1
    ...
    $ cabal build all --enable-tests --enable-benchmarks
    Up to date

    $ stack purge
    $ stack build --test --no-run-tests --bench --no-run-benchmarks
    ...
    Completed 2 action(s).

Converting Cabal
================

Before the conversion[#]_ there's many projects in this repository but the Stack
one, ``stack.yaml``, doesn't build[#]_.

    .. code-block:: bash

        $ tree -P 'cabal.project*|stack.yaml*' -L 1 --prune
        .
        ├── cabal.project
        ├── cabal.project.buildinfo
        ├── cabal.project.coverage
        ├── cabal.project.doctest
        ├── cabal.project.libonly
        ├── cabal.project.meta
        ├── cabal.project.release
        ├── cabal.project.validate
        ├── cabal.project.validate.libonly
        ├── cabal.project.weeder
        └── stack.yaml

        0 directories, 11 files

.. [#] At `up-do/cabal <cabal_>`_ on branch `add/updo-1.0.0 <cabal-1_>`_ there's
    a conversion from `haskell/cabal@976f86 <cabal-1-fork_>`_ also bootstrapped
    with ``updo-1.0.0`` from hackage.

.. [#] The Stack project fails to construct a build plan[#]_.

    .. code-block:: pre

        $ stack build --test --no-run-tests --bench --no-run-benchmarks

        Warning: Ignoring cabal-install's bounds on directory (>=1.3.7.0 && <1.4) and using directory-1.3.6.0.
                Reason: allow-newer enabled.

        Warning: Ignoring hackage-security's bounds on Cabal (>=1.14 && <1.26 || >=2.0 && <2.6 || >=3.0 && <3.7) and using Cabal-3.11.0.0.
                Reason: allow-newer enabled.

        Warning: Ignoring hackage-security's bounds on Cabal-syntax (<3.7) and using Cabal-syntax-3.11.0.0.
                Reason: allow-newer enabled.

        Warning: Ignoring cabal-install's bounds on process (>=1.6.15.0 && <1.7) and using process-1.6.13.2.
                Reason: allow-newer enabled.

        Warning: Ignoring cabal-testsuite's bounds on Cabal (((>=3.10 && <3.11) && >=3.11.0.0 && <3.12) && >=3.10 && <3.11) and using
                Cabal-3.11.0.0.
                Reason: allow-newer enabled.

        Warning: Ignoring cabal-testsuite's bounds on Cabal-syntax (((>=3.10 && <3.11) && >=3.11.0.0 && <3.12) && >=3.10 && <3.11) and using
                Cabal-syntax-3.11.0.0.
                Reason: allow-newer enabled.

        Warning: Ignoring cabal-testsuite's bounds on retry (^>=0.9.1.0) and using retry-0.8.1.2.
                Reason: allow-newer enabled.

        Error: [S-4804]
            Stack failed to construct a build plan.
            
            While constructing the build plan, Stack encountered the following errors. The 'Stack configuration' refers to the set of package
            versions specified by the snapshot (after any dropped packages, or pruned GHC boot packages; if a boot package is replaced, Stack
            prunes all other such packages that depend on it) and any extra-deps:
            
            In the dependencies for cabal-install-3.11.0.0:
                * semaphore-compat must match >=1.0.0 && <1.1, but no version is in the Stack configuration (latest matching version is 1.0.0).
            needed since cabal-install is a build target.
            
            In the dependencies for cabal-testsuite-3:
                * network-wait must match ^>=0.1.2.0 || ^>=0.2.0.0, but no version is in the Stack configuration (latest matching version is
                0.2.0.0).
            needed since cabal-testsuite is a build target.
            
            In the dependencies for Cabal-tests-3:
                * nothunks must match >=0.1.1.0 && <0.2, but no version is in the Stack configuration (latest matching version is 0.1.5).
            needed since Cabal-tests is a build target.
            
            Some different approaches to resolving some or all of this:
            
                * Recommended action: try adding the following to your extra-deps in /home/philderbeast/dev/src/updo/cabal/stack.yaml
                (project-level configuration):
                
                - network-wait-0.2.0.0@sha256:c9fd762f125b46a9fef5ff477b766c7ee38def659cdc05a2add8f4c6830db54a,3031
                - nothunks-0.1.5@sha256:ebe6c82d2533851f10fc9c7a045cedbfc2add3c61e7a03ef47aa07c8220de09a,2721
                - semaphore-compat-1.0.0@sha256:8ed6242cab5b0e1a8c654424275ac178035d108dfe4d651053947790fcf83017,1181

After conversion we can build Cabal with Cabal itself and with Stack:

.. code-block:: pre

    $ cabal clean
    $ cabal build all --enable-tests --enable-benchmarks
    Resolving dependencies...
    Build profile: -w ghc-9.4.7 -O1
    ...
    $ cabal build all --enable-tests --enable-benchmarks
    Up to date

    $ stack purge
    $ stack build --test --no-run-tests --bench --no-run-benchmarks
    ...
    Completed 17 action(s).

Conversion Steps
================

The steps of converting a project to Updo, using conversion of Cabal for example, are:

#. Ignores
    Ignore the working (``.updo``) and bootstrap (``updo``) folders in ``.gitignore``:

    .. code-block:: diff

        +.updo
        +updo

#. Versions
    Put stackage resolver and GHC version into ``project-versions.mk``[#]_, not
    bothering with separate upgrade versions for now. The process for adding an
    upgrade version is the same as for adding an initial current version.

    .. code-block:: makefile

        GHC_VERSION ?= 9.4.7
        STACKAGE_VERSION ?= lts-21.19
        GHC_UPGRADE ?= 9.4.7
        STACKAGE_UPGRADE ?= lts-21.19

#. Stackage Config
    Download a `cabal.config <stackage-cabal-config_>`_ file from stackage
    matching the resolver version and save it to
    ``project-stackage/${STACKAGE-VERSION}.config``.  This likely won't work
    as-is. No worries, we'll comment out version constraints that clash later.

    .. code-block:: bash

        $ mkdir -p project-stackage
        $ curl -sSL https://www.stackage.org/lts-21.19/cabal.config > project-stackage/lts-21.19.config

#. Group Packages
    Add configuration under ``project-dhall/ghc-${GHC-VERSION}``.  We'll break
    the packages up into groups and as we're not yet upgrading we'll use an
    empty list for upgrades yet to do.

    .. code-block:: dhall

        -- project-dhall/pkg-groups.dhall
        [ "benchmarks", "hackage", "tests" ]

        -- project-dhall/pkgs/benchmarks.dhall
        [ "cabal-benchmarks", "solver-benchmarks" ]

        -- project-dhall/pkgs/hackage.dhall
        [ "Cabal", "Cabal-syntax", "cabal-install", "cabal-install-solver" ]

        -- project-dhall/pkgs/tests.dhall
        [ "Cabal-QuickCheck", "Cabal-described", "Cabal-tests", "Cabal-tree-diff", "cabal-testsuite" ]

        -- project-dhall/pkgs-upgrade-todo.dhall
        [] : List Text

#. Source Repositories
    Cabal doesn't use any source repository packages so we can leave all of
    these empty[#]_.

    .. code-block:: dhall

        -- project-dhall/ghc-9.4.7/deps-external.dhall
        -- project-dhall/ghc-9.4.7/deps-internal.dhall
        -- project-dhall/ghc-9.4.7/forks-external.dhall
        -- project-dhall/ghc-9.4.7/forks-internal.dhall
        [] : List { loc : Text, tag : Text, sub : List Text }

#. Text Templates
    Add text templates for the ways we want to generate projects. Pasted
    verbatim, the following ``dhall2config``[#]_ template for Cabal and
    ``dhall2stack`` template for Stack put the snippet content before the
    default template content.

    .. code-block:: dhall

        -- project-dhall/ghc-9.4.7/text-templates/dhall2config.dhall
        \(stackage-resolver : Text) ->
        \(ghc-version : Text) ->
          let project-dhall2config = ../../../updo/text-templates/dhall2config.dhall
        
          in  ''
              ${./cabal-snippet.dhall}
              ${project-dhall2config stackage-resolver ghc-version}
              ''

    .. code-block:: dhall

        -- project-dhall/ghc-9.4.7/text-templates/dhall2stack.dhall
        let TYPES = ./../../../updo/types.dhall
        
        let null = https://prelude.dhall-lang.org/List/null
        
        in  \(pkgs-done : List Text) ->
            \(stackage-resolver : Text) ->
              let pkgs-todo = ../../pkgs-upgrade-todo.dhall
        
              let pkg-config =
                    { constraints = ./../constraints.dhall
                    , source-pkgs =
                      { deps-external = ./../deps-external.dhall
                      , deps-internal = ./../deps-internal.dhall
                      , forks-external = ./../forks-external.dhall
                      , forks-internal = ./../forks-internal.dhall
                      }
                    }
        
              in  ''
                  ${./stack-snippet.dhall (None Text)}
                  ${../../../updo/text-templates/dhall2stack.dhall
                      stackage-resolver
                      ( if    null Text pkgs-todo
                        then  TYPES.PkgSet.AllPkgs pkgs-done
                        else  TYPES.PkgSet.PkgUpgrade
                                { todo = pkgs-todo, done = pkgs-done }
                      )
                      pkg-config}
                  ''

    .. note::

        The ``dhall2stack`` template is more complicated than the
        ``dhall2config`` template[#]_ because everything generated goes into one
        ``ghc-x.y.z.dhall2stack.yaml`` file so it **has to** handle upgrades
        whereas the root ``ghc-x.y.z-dhall2config.project`` imports generated 
        ``project-config/pkgs/*.config`` package groups indirectly through
        ``project-config/pkgs.config``.

        In ``project-config/pkgs/*.config`` files, partitioning of packages
        into those included in the upgrade project and those yet to do is done
        by the installed ``updo-pkg-groups`` executable or the
        ``./updo/project-dhall2config/pkg-groups.hs`` script invoked by a make
        recipe and not by the ``dhall2config`` template.

#. Snippets
    Snippets are used to add extra configuration to the generated projects,
    configuration unknown to Updo. Compare generated projects with those same
    files before the conversion to see what's missing.

    .. code-block:: dhall

        -- project-dhall/ghc-9.4.7/text-templates/cabal-snippet.dhall
        ''
        tests: True
        optional-packages: ./vendored/*/*.cabal
        constraints: rere -rere-cfg
        program-options
          ghc-options: -fno-ignore-asserts
        ''

        -- project-dhall/ghc-9.4.7/text-templates/stack-snippet.dhall
        \(stackage-resolver : Optional Text) ->
          let resolver =
                merge
                  { None = ""
                  , Some =
                      \(r : Text) ->
                        ''
        
                        resolver: ${r}''
                  }
                  stackage-resolver
        
          in  ''
              user-message: "WARNING: This stack project is generated."
              allow-newer: true
              flags:
                rere:
                  rere-cfg: false
              ghc-options:
                "$locals": -fhide-source-paths
              ${resolver}
              ''

    .. note::
        We need ``allow-newer: true`` because ``cabal-testsuite`` has a custom
        setup depending on ``3.10.*`` of ``Cabal`` and ``Cabal-syntax`` while
        the rest of the package depends on ``3.11.*``.

#. Bootstrap
    Add the entry and bootstrapping Updo makefile, ``project-files.mk``:

    .. code-block:: makefile

        # project-files.mk
        # To use installed executables instead of *.hs scripts, set these to true.
        PKG_GROUPS_HS_EXE ?= false
        PKGS_SORTED_HS_EXE ?= false
        PKGS_UPGRADE_DONE_HS_EXE ?= false
        
        include project-versions.mk
        include updo/Makefile
        
        project-nix/ghc-%/sha256map.nix: ghc-%.sha256map.nix
        	mkdir -p $(@D) && cp $^ $@
        
        .PHONY: all
        all: \
          projects \
          project-nix/ghc-$(GHC_VERSION)/sha256map.nix \
          project-versions.nix
        
        # To make stack.yaml or cabal.project and no other, mark the file we copy from
        # as intermediate. This is all we want when not doing a GHC upgrade.
        #
        # Comment out these .INTERMEDIATE targets to allow these files to be kept.
        .INTERMEDIATE: ghc-$(GHC_VERSION).$(CABAL_VIA).project
        .INTERMEDIATE: ghc-$(GHC_UPGRADE).$(CABAL_VIA).project
        .INTERMEDIATE: ghc-$(GHC_VERSION).$(STACK_VIA).yaml
        .INTERMEDIATE: ghc-$(GHC_UPGRADE).$(STACK_VIA).yaml
        
        .DEFAULT_GOAL := all
        
        UPDO_VERSION ?= 1.0.0
        HACKAGE := http://hackage.haskell.org/package
        UPDO_URL := ${HACKAGE}/updo-${UPDO_VERSION}/updo-${UPDO_VERSION}.tar.gz
        
        updo/Makefile:
        	rm -rf updo
        	curl -sSL ${UPDO_URL} | tar -xz
        	mv updo-${UPDO_VERSION} updo
        	chmod +x $$(grep -RIl '^#!' updo)

#. Constrain Versions
    Try to generate projects with ``make``. If this fails, Stack will complain
    the loudest.

    .. code-block:: pre

        $ make -f project-files.mk
        ...
          * directory must match >=1.2 && <1.4, but this GHC boot package has been
            pruned from the Stack configuration.  You need to add the package
            explicitly to extra-deps. (latest matching version is 1.3.8.1).
          * process must match >=1.2.1.0 && <1.7, but this GHC boot package has
            been pruned from the Stack configuration. You need to add the package
            explicitly to extra-deps. (latest matching version is 1.6.17.0).
          * directory must match >=1.2 && <1.4, but this GHC boot package has
            been pruned from the Stack configuration. You need to add the package
            explicitly to extra-deps. (latest matching version is 1.3.8.1).
          * process must match >=1.2.1.0 && <1.7, but this GHC boot package has
            been pruned from the Stack configuration. You need to add the package
            explicitly to extra-deps. (latest matching version is 1.6.17.0).

    Use the suggestions from Stack to add version equality constraints:

    .. code-block:: dhall

        -- project-dhall/ghc-9.4.7/constraints.dhall
        [ { dep = "directory", ver = "1.3.8.1" }
        , { dep = "filepath", ver = "1.4.100.4" }
        , { dep = "process", ver = "1.6.17.0" }
        , { dep = "rere", ver = "0.2" }
        , { dep = "semaphore-compat", ver = "1.0.0@rev:1" }
        , { dep = "unix", ver = "2.8.2.1" }
        ]

    .. note::
        All the recommendations from Stack match ``cabal freeze`` versions before
        the conversion, except for ``process-1.6.18.0`` and ``unix-2.8.3.0``.

#. Fixup Unsatisfiable Version Constraints
    Where there are unsatisfiable version constraints with the Cabal solver,
    comment out the relevant line from the stackage-sourced ``cabal.config``
    that we saved locally:

    .. code-block:: haskell

        -- project-stackage/lts-21.19.config
        -- NOTE: Due to revisions, this file may not work. See:
        -- https://github.com/fpco/stackage-server/issues/232
        
        -- Stackage snapshot from: http://www.stackage.org/snapshot/lts-21.19
        -- Please place this file next to your .cabal file as cabal.config
        -- To only use tested packages, uncomment the following line:
        -- remote-repo: stackage-lts-21.19:http://www.stackage.org/lts-21.19
        with-compiler: ghc-9.4.7
        constraints:
        ...
            -- Cabal installed,
            -- cabal-install ==3.8.1.0,
            -- cabal-install-solver ==3.8.1.0,
            -- Cabal-syntax installed,
            -- directory installed,
            -- filepath installed,
            -- process installed,
            -- unix installed,

.. [#] The ``project-versions.mk`` filename is a convention we've used so far
    but you can use any name for this file.

.. [#] ``updo-1.0.0`` doesn't use a `default empty list <empty-list-default_>`_
    when a configuration file is missing but that feature is in the works,
    implemented but not yet published.

.. _empty-list-default: https://github.com/cabalism/updo/issues/9

.. [#] ``dhall2caball`` is not shown here as it's very similar to ``dhall2stack``.

    .. code-block:: diff

            -- ${./stack-snippet.dhall (None Text)}
            ++ ${./cabal-snippet.dhall}
            -- ${../../../updo/text-templates/dhall2stack.dhall
            ++ ${../../../updo/text-templates/dhall2cabal.dhall

.. _up-do: https://github.com/orgs/up-do/repositories
.. _dex: https://github.com/up-do/dex-lang
.. _stack: https://github.com/up-do/stack
.. _stack-1: https://github.com/up-do/stack
.. _stack-1-fork: https://github.com/commercialhaskell/stack/commit/68bc7057f7c24086f32f4c647571be0faa4a6512
.. _cabal: https://github.com/up-do/cabal
.. _cabal-1: https://github.com/up-do/cabal
.. _cabal-1-fork: https://github.com/haskell/cabal/commit/976f86ab67952d377c25f19e6a2594e0000900a2
.. _stackage-lookup: https://www.stackage.org/lts-20.23
.. _stackage-cabal-config: https://www.stackage.org/lts-21.19/cabal.config