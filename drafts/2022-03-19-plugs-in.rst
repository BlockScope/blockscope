---
title: Plugs In
subtitle: Sending options to type checker plugins.
slug: Sending options to type checker plugins.
tags: haskell, tcplugins
---
Following on from the post `Plugs Out`_ about configuring type checker plugins,
this one is about passing options to them.

.. _Plugs Out: /posts/2020-07-09-plugs-out.html

The GHC user's guide in the section on using compiler plugins:

    Plugins can be added on the command line with the ``-fplugin=⟨module⟩``
    option where ⟨module⟩ is a module in a registered package that exports the
    plugin. Arguments can be passed to the plugins with the
    ``-fplugin-opt=⟨module⟩:args`` option. The list of enabled plugins can
    be reset with the ``-fclear-plugins`` option.

    * ``-fplugin=⟨module⟩``
        Load the plugin in the given module. The module must be a member of a
        package registered in GHC's package database.

    * ``-fplugin-opt=⟨module⟩:args``
        Give arguments to a plugin module; module must be specified with ``-fplugin=⟨module⟩``

I wanted to test the order of plugin calls by the GHC, would this be in the
lexicographic order I wired up the plugins? The ``ghc-plugs-out`` package has a
test-suite for tesing a plugin that counts its each call.

.. code:: haskell

    {-# OPTIONS_GHC -fplugin CallCount.Pure.Plugin #-}

    module Main where

    foo :: IO a
    foo = undefined

    bar :: IO a
    bar = undefined

    main :: IO ()
    main = return ()

.. code:: pre

    > cabal test test-counter-main
    [1 of 1] Compiling Main
    >>> GHC-TcPlugin #1
    >>> GHC-TcPlugin #2

Instead of writing separate plugins to test the call order could I pass a string
option that the plugin uses as a prefix when logging? With ``OPTIONS_GHC``
pragmas we might pass options to a plugin *in-turn* or *in-line* (substituting ``X``
for ``CallCount.Pure.Plugin``).

#. *In-turn* when ``-fplugin`` and ``-fplugin-opt`` are on separate lines.

    .. code:: haskell
        
        {-# OPTIONS_GHC     -fplugin X   #-}
        {-# OPTIONS_GHC -fplugin-opt X:A #-}
        {-# OPTIONS_GHC     -fplugin X   #-}
        {-# OPTIONS_GHC -fplugin-opt X:B #-}

    .. code:: pre

        > cabal test test-in-turn
        [1 of 1] Compiling Main
        >>> AB #1
        >>> AB #1
        >>> AB #2
        >>> AB #2

#. *In-line* when ``-fplugin`` and ``-fplugin-opt`` are on the same line.

    .. code:: haskell

        {-# OPTIONS_GHC -fplugin X -fplugin-opt X:A #-}
        {-# OPTIONS_GHC -fplugin X -fplugin-opt X:B #-}

    .. code:: pre

        > cabal test test-in-line
        [1 of 1] Compiling Main
        >>> AB #1
        >>> AB #1
        >>> AB #2
        >>> AB #2

I was able to rewrite the counting plugin so that it used the passed args as a
prefix when logging. Trouble is that all options are passed to all plugins
whichever way they're wired up.

So I need at least a unique module to get the arg to the plugin I'm targetting.
Re-exports are sufficient.

.. code:: haskell

    -- module X1
    module X1 (plugin) where

    import X (plugin)

#. *In-turn* when ``-fplugin`` and ``-fplugin-opt`` are on separate lines.

    .. code:: haskell
        
        {-# OPTIONS_GHC     -fplugin X1   #-}
        {-# OPTIONS_GHC -fplugin-opt X1:A #-}
        {-# OPTIONS_GHC     -fplugin X2   #-}
        {-# OPTIONS_GHC -fplugin-opt X2:B #-}

    .. code:: pre

        > cabal test test-in-turn-each
        [1 of 1] Compiling Main
        >>> B #1
        >>> A #1
        >>> B #2
        >>> A #2

#. *In-line* when ``-fplugin`` and ``-fplugin-opt`` are on the same line.

    .. code:: haskell

        {-# OPTIONS_GHC -fplugin X1 -fplugin-opt X1:A #-}
        {-# OPTIONS_GHC -fplugin X2 -fplugin-opt X2:B #-}

    .. code:: pre

        > cabal test test-in-line-each
        [1 of 1] Compiling Main
        >>> B #1
        >>> A #1
        >>> B #2
        >>> A #2


