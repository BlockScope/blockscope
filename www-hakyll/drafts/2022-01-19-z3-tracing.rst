---
title: Z3 Tracing
subtitle: Improving tracing of the Thoralf plugin.
tags: haskell, tcplugins, z3, tracing
---

The thoralf plugin is using simple-smt_ to talk with Z3 to solve typechecking
constraints. The communication format are smt-lib_ s-expressions. This package
is able to read and show these without needing to know much about them. It does
recognize a few of these s-expressions from the smt-lib standard. The recursive
data representation of these is simple, hence the name I guess.

.. code:: haskell

    data SExpr = Atom String | List [SExpr]

Removing Extra Spaces
---------------------

I've been doing a lot of tracing and noticed extra spaces in the s-expressions.

.. code:: pre

    > cabal build thoralf-plugin-uom:uom-diy > thoralf-uom-diy.txt

.. code:: smt2

    ; thoralf-uom-diy.txt
    (assert (= a1Cv a1Cn ) )
    (check-sat )

I'd like to have the s-expressions show up in the trace without those extra
spaces, like this:

.. code:: smt2

    (assert (= a1Cv a1Cn))
    (check-sat)

This the fix for that.

.. code:: diff

     --- SimpleSMT.hs
     +++ SimpleSMT.hs
        showsSExpr :: SExpr -> ShowS
        showsSExpr ex =
          case ex of
            Atom x  -> showString x
    -       List es -> showChar '(' .
    -                   foldr (\e m -> showsSExpr e . showChar ' ' . m)
    -                   (showChar ')') es
    +       List [] -> showString "()"
    +       List (e0 : es) -> showChar '(' . showsSExpr e0 .
    +                          foldr (\e m -> showChar ' ' . showsSExpr e . m)
    +                          (showChar ')') es

I contributed this fix upstream. It's been merged.

Choosing an S-Expression Printer
--------------------------------

Functions in simple-smt for showing s-expressions are ``showsSExpr`` and
``ppSExpr``.

.. code:: haskell

    -- | Show an s-expression.
    --
    -- >>> let Just (e, _) = readSExpr "(assert (= ((_ map (- (Int Int) Int)) a1Cl a1Cm) a1Cv))"
    -- >>> putStrLn $ showsSExpr e ""
    -- (assert (= ((_ map (- (Int Int) Int)) a1Cl a1Cm) a1Cv))
    showsSExpr :: SExpr -> ShowS

    -- | Show an s-expression in a somewhat readable fashion.
    --
    -- >>> let Just (e, _) = readSExpr "(assert (= ((_ map (- (Int Int) Int)) a1Cl a1Cm) a1Cv))"
    -- >>> putStrLn $ ppSExpr e ""
    -- (assert
    --    (=
    --       (
    --         (_
    --            map
    --            (-
    --               (Int Int)
    --               Int))
    --         a1Cl
    --         a1Cm)
    --       a1Cv))
    ppSExpr :: SExpr -> ShowS

I want to use the pretty printer ``ppSExpr`` but simple-smt itself uses the
all-in-one-line printer ``showsSExpr`` and that is how the comms with Z3 are
showing up while I'm tracing. To work on this I added simple-smt as a submodule
after first forking it to the *BlockScope* organization on github.

.. code:: pre

    > git submodule add https://github.com/BlockScope/simple-smt
    > cd simple-smt
    > git checkout -b wip/plugins-for-blobs

I need to add an entry to ``cabal.project`` to pick up this dependency locally
rather than from hackage, all without changing any of the ``*.cabal`` files that
mention ``simple-smt`` as a dependency.

.. code:: haskell

    -- cabal.project
    packages:
        simple-smt
        thoralf-plugin

By passing an ``SExpr -> ShowsS`` printer in as a parameter when setting up the
solver and using this instead of ``showsSExpr`` I'm now getting nicely formatted
and much easier to follow tracing. As a bonus, lines are all short enough so hat
they won't need scrolling when viewed in a narrow frame so as when showing up as
code snippets on this blog.

.. code:: haskell

    -- | Start a new solver process.
    newSolver
        :: String -- ^ Executable
        -> [String] -- ^ Arguments
        -> (SExpr -> ShowS) -- ^ Function for showing s-expressions
        -> Maybe Logger -- ^ Optional logging here
        -> IO Solver

Roundtripping
-------------

I'd like to be able to take the output of tracing compilation of a package with
modules using the thoralf plugin and then to take that output and use it as
input to the Z3 solver as-is.

The logging of simple-smt prefixes comms with ``[send->]`` and ``[<-recv]``. I'm
able to filter that out before tracing by updating the logger to strip out those
prefixes.

.. code:: haskell

    data DebugSmtTalk =
        DebugSmtTalk
            { traceSend :: Bool
            , traceRecv :: DebugSmtRecv
            , traceErr :: Bool
            , traceOther :: Bool
            , traceArrow :: Bool
            , traceCtsComments :: Bool
            }

    data DebugSmtRecv
        = DebugSmtRecvAll Bool
        | DebugSmtRecvSome
            { traceSuccess :: Bool
            , traceCheckSat :: Bool
            }
        deriving Eq

    -- | Flag for controlling the two-way conversation with the SMT solver.
    newtype TraceSmtTalk = TraceSmtTalk DebugSmtTalk

    -- TODO: Contribute upstream to SimpleSMT to avoid matching on string prefixes.
    solverWithLevel :: TraceSmtTalk -> IO SMT.Solver
    solverWithLevel (TraceSmtTalk dbg)
        | isSilencedTalk dbg = grabSMTsolver Nothing
        | otherwise = do
            logger@Logger{logMessage = logMsg} <- SMT.newLogger 0
            let logger' = logger{logMessage = \s -> do
                let sends = split (dropBlanks $ onSublist "[send->] ") s
                let recvs = split (dropBlanks $ onSublist "[<-recv] ") s
                let errs = split (dropBlanks $ onSublist "[stderr] ") s

                let dbgArrow = traceArrow dbg
                let dbgSend = traceSend dbg

                let dbgRecvCheckSat =
                        case traceRecv dbg of
                            DebugSmtRecvSome{traceCheckSat = b} -> b
                            _ -> False

                let dbgRecvSuccess =
                        case traceRecv dbg of
                            DebugSmtRecvSome{traceSuccess = b} -> b
                            _ -> False

                let dbgRecvAll = DebugSmtRecvAll True == traceRecv dbg

                case (recvs, sends, errs) of
                    (_, "[send->] " : [msg], _) ->
                        if | dbgSend && dbgArrow -> logMsg s
                           | dbgSend -> logMsg msg
                           | otherwise -> return ()

                    -- NOTE: :print-success can print success | unsupported | error _.
                    ("[<-recv] " : msgContent, _, _) ->
                        case msgContent of
                            [msg@"sat"] ->
                                if | dbgRecvCheckSat && dbgArrow -> logMsg s
                                | dbgRecvCheckSat -> logMsg $ "; " ++ msg
                                | otherwise -> return ()

                            [msg@"unsat"] ->
                                if | dbgRecvCheckSat && dbgArrow -> logMsg s
                                | dbgRecvCheckSat -> logMsg $ "; " ++ msg
                                | otherwise -> return ()

                            [msg@"success"] ->
                                if | dbgRecvSuccess && dbgArrow -> logMsg s
                                | dbgRecvSuccess -> logMsg msg
                                | otherwise -> return ()

                            [msg@"unsupported"] ->
                                if | dbgRecvSuccess && dbgArrow -> logMsg s
                                | dbgRecvSuccess -> logMsg msg
                                | otherwise -> return ()

                            "error" : _ ->
                                if | dbgRecvSuccess && dbgArrow -> logMsg s
                                | dbgRecvSuccess -> logMsg $ drop (length "[<-recv] error ") s
                                | otherwise -> return ()

                            _msgs ->
                                if | dbgRecvAll && dbgArrow -> logMsg s
                                | dbgRecvAll -> logMsg s
                                | otherwise -> return ()

                    (_, _, "[stderr] " : _) ->
                        when (traceErr dbg) $ logMsg s

                    (_, _, _) ->
                        when (traceOther dbg) $ logMsg s
                }

            grabSMTsolver (Just logger')

    grabSMTsolver :: Maybe SMT.Logger -> IO SMT.Solver
    grabSMTsolver =
        -- NOTE: IfÂ you don't want the s-expressions pretty printed then substitute
        -- SMT.showsSExpr for SMT.ppSExpr.
        SMT.newSolver "z3" ["-smt2", "-in"] SMT.ppSExpr



What's left to do for roundtripping is to prefix ``"; "`` before any tracing
output that I don't want left alive as input, to make it a comment, to deaden
it.

Constraints Encoding
--------------------

The whole point of the thoralf plugin is to encode a theory as s-expressions so
that it can offload solving to Z3. When tracing I'd like to see the constraints
passed in to the plugin by GHC. The uom-plugin is showing these, printed with
GHC's own pretty printing, but the thoralf-plugin is rolling its own printing.
I've pulled that out and put it into its own package, ``ghc-tcplugins-trace``.

To help me work through solving, I traced output to a file that I then used as a
scratch file for input to z3. Eventually I got to the point where I could use
the trace output as input without any edits. Here are the changes I made:

* Don't refresh (stop and restart) the solver.

.. code:: diff

     --- smt2/thoralf-plugin-uom.smt2
     +++ smt2/thoralf-plugin-uom.smt2
        (set-option :print-success true)
        (set-option :produce-models true)
        (set-option :interactive-mode true)
        (set-option :produce-assertions true)
        (set-option :produce-models true)
        (set-option :produce-assignments true)
        (set-option :produce-proofs true)
        (set-option :produce-unsat-assumptions true)
        (set-option :produce-unsat-cores true)
    -   (push 1)
    -   (exit)
    -   (set-option :print-success true)
    -   (set-option :produce-models true)

* Echo the cycles of typechecking so that these will show up again when the log
  is rerun.

.. code:: smt2

    (echo "solver-start-cycle-1")
    (echo "givens-start-cycle-1")
    (echo "givens-finish-cycle-1")
    (echo "wanteds-start-cycle-1")
    (echo "wanteds-finish-cycle-1")
    (echo "solver-finish-cycle-1")
    (echo "solver-start-cycle-2")
    ; ...
    (echo "solver-finish-cycle-10")

* Print the given and wanted constraints.

.. code:: smt2

    ; GIVENS (GHC style)
    ; [G] cobox_a1Bz {3}:: One ~ fsk0 (CFunEqCan)
    ; [G] cobox_a1Bx {2}:: Base "m" ~ fsk0 (CFunEqCan)
    ; [G] cobox_a1BD {2}:: Base "s" ~ fsk0 (CFunEqCan)
    ; [G] cobox_a1BB {2}:: (fsk0 *: fsk1) ~ fsk2 (CFunEqCan)
    ; [G] cobox_a1BF {2}:: (fsk0 *: fsk1) ~ fsk2 (CFunEqCan)
    ; [G] cobox_a1BH {1}:: (fsk0 /: fsk1) ~ fsk2 (CFunEqCan)
    ; [G] cobox_a1BL {1}:: fsk0 ~ mps (CTyEqCan)

    ; WANTEDS (GHC style)
    ; []

    ; GIVENS (Thoralf style)
    ; (One [],a1By)
    ; (Base ["m"],a1Bw)
    ; (Base ["s"],a1BC)
    ; (*: [a1Bw,a1By],a1BA)
    ; (*: [a1BC,a1By],a1BE)
    ; (/: [a1BA,a1BE],a1BG)
    ; (a1BG,a1u1)

    ; WANTEDS (Thoralf style)
    ; []

* Print the source of the encoded names (they're using uniques. [#]_).

.. code:: smt2

    ; GIVENS (conversions)
    ; GIVENS (names)
    ;  a1u1  <=  mps
    ;  a1Bw  <=  fsk_a1Bw
    ;  a1By  <=  fsk_a1By
    ;  a1BA  <=  fsk_a1BA
    ;  a1BC  <=  fsk_a1BC
    ;  a1BE  <=  fsk_a1BE
    ;  a1BG  <=  fsk_a1BG

* Even though the thoralf-plugin is using the push/pop stack mode of incremental
  solving, I'd still like to know what declarations were previous seen so I show
  those too. Could be useful if we switch to using assumptions_ instead.

.. code:: smt2

    ; DECS1 (seen) 
    ; DECS1 (unseen) 
    ; (declare-const a1BA (Array String Int))
    ; (declare-const a1BC (Array String Int))
    ; (declare-const a1BE (Array String Int))
    ; (declare-const a1BG (Array String Int))
    ; (declare-const a1Bw (Array String Int))
    ; (declare-const a1By (Array String Int))
    ; (declare-const a1u1 (Array String Int))

* Pretty print the declarations.

.. code:: smt2

    (declare-const
        a1u1
        (Array String Int))
    (declare-const
        a1Bw
        (Array String Int))
    (declare-const
        a1By
        (Array String Int))
    (declare-const
        a1BA
        (Array String Int))
    (declare-const
        a1BC
        (Array String Int))
    (declare-const
        a1BE
        (Array String Int))
    (declare-const
        a1BG
        (Array String Int))

* Pretty print and name the assertions.

.. code:: smt2

    (assert
        (!
            (=
                (
                (as
                    const
                    (Array String Int))
                0)
                a1By)
            :named
            given-1.1))
    (assert
        (!
            (=
                (store base "m" one)
                a1Bw)
            :named
            given-1.2))
    (assert
        (!
            (=
                (store base "s" one)
                a1BC)
            :named
            given-1.3))
    (assert
        (!
            (=
                (
                (_
                    map
                    (+
                        (Int Int)
                        Int))
                a1Bw
                a1By)
                a1BA)
            :named
            given-1.4))
    (assert
        (!
            (=
                (
                (_
                    map
                    (+
                        (Int Int)
                        Int))
                a1BC
                a1By)
                a1BE)
            :named
            given-1.5))
    (assert
        (!
            (=
                (
                (_
                    map
                    (-
                        (Int Int)
                        Int))
                a1BA
                a1BE)
                a1BG)
            :named
            given-1.6))
    (assert
        (!
            (= a1BG a1u1)
            :named
            given-1.7))

* Show the check sat result as a comment.

.. code:: smt2

    (check-sat)
    ; unsat

* For ``unsat`` get the assertions and the unsat core.

.. code:: smt2

    (check-sat)
    ; unsat
    (get-assertions)
    ; (
    ;   (= one 1)
    ;   (= enc base)
    ;   (!
    ;      (=
    ;         (
    ;           (as
    ;              const
    ;              (Array String Int))
    ;           0)
    ;         a1H8)
    ;      :named
    ;      given-9.1)
    ;   (!
    ;      (=
    ;         (store base "m" one)
    ;         a1H6)
    ;      :named
    ;      given-9.2)
    ;   (!
    ;      (=
    ;         (store base "s" one)
    ;         a1Hc)
    ;      :named
    ;      given-9.3)
    ;   (!
    ;      (=
    ;         (
    ;           (_
    ;              map
    ;              (+
    ;                 (Int Int)
    ;                 Int))
    ;           a1H6
    ;           a1H8)
    ;         a1Ha)
    ;      :named
    ;      given-9.4)
    ;   (!
    ;      (=
    ;         (
    ;           (_
    ;              map
    ;              (+
    ;                 (Int Int)
    ;                 Int))
    ;           a1Hc
    ;           a1H8)
    ;         a1He)
    ;      :named
    ;      given-9.5)
    ;   (!
    ;      (=
    ;         (
    ;           (_
    ;              map
    ;              (-
    ;                 (Int Int)
    ;                 Int))
    ;           a1Ha
    ;           a1He)
    ;         a1Hg)
    ;      :named
    ;      given-9.6)
    ;   (!
    ;      (= a1Hg a1Fi)
    ;      :named
    ;      given-9.7)
    ;   (!
    ;      (or
    ;         false
    ;         (not
    ;            (=
    ;               (
    ;                 (_
    ;                    map
    ;                    (+
    ;                       (Int Int)
    ;                       Int))
    ;                 a1Fi
    ;                 (
    ;                   (_
    ;                      map
    ;                      (+
    ;                         (Int Int)
    ;                         Int))
    ;                   (store base "s" one)
    ;                   (
    ;                     (as
    ;                        const
    ;                        (Array String Int))
    ;                     0)))
    ;               (
    ;                 (_
    ;                    map
    ;                    (+
    ;                       (Int Int)
    ;                       Int))
    ;                 (store base "m" one)
    ;                 (
    ;                   (as
    ;                      const
    ;                      (Array String Int))
    ;                   0)))))
    ;      :named
    ;      wanted-9))
    (get-unsat-core)
    ; (given-9.6
    ;    given-9.5
    ;    given-9.3
    ;    given-9.7
    ;    given-9.1
    ;    given-9.4
    ;    given-9.2
    ;    wanted-9)

Re-running a Trace
------------------

It used to be the trace was quite uninformative.

.. code:: pre

    > z3 smt2/thoralf-plugin-uom-diy.smt2
    success
    success
    success
    success

With the tracing additions we can follow along. With the echoed cycles and the
named assertions, cross-referencing back into the trace is straight forward.

.. code:: pre

    > z3 smt2/thoralf-plugin-uom-diy.smt2
    ...
    givens-start-cycle-9
    success
    success
    success
    success
    success
    success
    success
    success
    success
    success
    success
    success
    success
    success
    success
    sat
    givens-finish-cycle-9
    wanteds-start-cycle-9
    success
    unsat
    wanteds-finish-cycle-9
    ((= one 1)
    (= enc base)
    (!
        (=
            (
            (as
                const
                (Array String Int))
            0)
            a1H8)
        :named
        given-9.1)
    (!
        (=
            (store base "m" one)
            a1H6)
        :named
        given-9.2)
    (!
        (=
            (store base "s" one)
            a1Hc)
        :named
        given-9.3)
    (!
        (=
            (
            (_
                map
                (+
                    (Int Int)
                    Int))
            a1H6
            a1H8)
            a1Ha)
        :named
        given-9.4)
    (!
        (=
            (
            (_
                map
                (+
                    (Int Int)
                    Int))
            a1Hc
            a1H8)
            a1He)
        :named
        given-9.5)
    (!
        (=
            (
            (_
                map
                (-
                    (Int Int)
                    Int))
            a1Ha
            a1He)
            a1Hg)
        :named
        given-9.6)
    (!
        (= a1Hg a1Fi)
        :named
        given-9.7)
    (!
        (or
            false
            (not
                (=
                (
                    (_
                        map
                        (+
                        (Int Int)
                        Int))
                    a1Fi
                    (
                    (_
                        map
                        (+
                            (Int Int)
                            Int))
                    (store base "s" one)
                    (
                        (as
                            const
                            (Array String Int))
                        0)))
                (
                    (_
                        map
                        (+
                        (Int Int)
                        Int))
                    (store base "m" one)
                    (
                    (as
                        const
                        (Array String Int))
                    0)))))
        :named
        wanted-9))
    (given-9.6 given-9.5 given-9.3 given-9.7 given-9.1 given-9.4 given-9.2 wanted-9)
    success
    solver-finish-cycle-9

    
Unexploded Atoms
----------------

To help get pretty printing going I replaced each call to ``Atom`` with a call
to ``justReadSExpr``, avoiding lists masquerading as atoms when the string
within the atom is itself an s-expression.

.. code:: haskell

    {-# OPTIONS_GHC -fwarn-incomplete-uni-patterns #-}

    justReadSExpr :: String -> SExpr
    justReadSExpr sexpr = let Just (e, _) = SMT.readSExpr sexpr in e

This is dangerous but something I can live with while this project is a work in
progress and I want to get on with tracing rather than yak-shaving [#]_.

.. code:: pre

    src/ThoralfPlugin/Convert.hs: warning: [-Wincomplete-uni-patterns]
        Pattern match(es) are non-exhaustive
        In a pattern binding: Patterns not matched: Nothing
        |
    ___ | justReadSExpr sexpr = let Just (e, _) = SMT.readSExpr sexpr in e
        |

No Wanted Constraints
---------------------

With detailed tracing I noticed that there were some annoying wanteds in the
trace.

.. code:: smt2

    (assert
        (! false :named wanted-1))
    (check-sat)
    ; unsat

This is the assertion we construct when there are zero wanteds.

.. code:: haskell

    -- TcPlugin.hs

    let name = "wanted-" ++ cycle 
    SMT.assert smtSolver $ SMT.named name (smtWanted wExprs)
    c <- SMT.check smtSolver

    smtWanted :: [ConvEq] -> SMT.SExpr
    smtWanted ws = foldl' SMT.or (SMT.Atom "false") (map (SMT.not . eqSExpr) ws)

With no wanted constraints there's no useful work to do. Checking the
consistency of the givens without wanteds is not useful. I added a pattern match
for empty list of wanteds and threw the problem back to GHC in that case. The
tracing logs drastically reduced in size with this change::

    +--------------+--------+--------+
    | TEST SUITE   | BEFORE |  AFTER |
    +==============+========+========+
    | uom-diy      |  1,742 |    733 |
    +--------------+--------+--------+
    | uom-quantity |  1,693 |    872 |
    +--------------+--------+--------+
    | defs         |    255 |    175 |
    +--------------+--------+--------+
    | force        |  1,222 |    822 |
    +--------------+--------+--------+
    | units        | 22,026 | 14,118 |
    +--------------+--------+--------+
    | rows         | 26,322 | 12,915 |
    +--------------+--------+--------+

.. _simple-smt: https://hackage.haskell.org/package/simple-smt
.. _smt-lib: https://smtlib.cs.uiowa.edu/language.shtml
.. [#] I've done a little yak-shaving, writing a Kate Highlighting XML file so
    that smt2 files show with highlighting on this blog.
.. [#] Uniques are unique identifiers used for "fast ordering and equality
    tests" in GHC. The function used to get these when encoding is ``getUnique :: a -> Unique``.
.. _assumptions: https://stackoverflow.com/a/40427658/1503186