---
title: Unit Solving with Z3.
subtitle: Worked examples with the encoding from the Thoralf plugin.
tags: haskell, tcplugins
---

Tracing Plugins
---------------

To trace a program using the ``uom-plugin`` add the ghc option
``-ddump-tc-trace``. This will produce very detailed logging of typechecking.
For the following small program, the log ran to 70,000 lines.

With a regex I grabbed the first word ``s/^(\S+).*$/$1/``, deleted lines with
leading spaces with ``s/  .*\n/\n/`` and deleted multiple blank lines with
``s/\n\n+/\n/``. These are the unique leading words of typechecker tracing.

.. code:: pre

    -------- ---------------------------
    ------------------------------------------------
    About addFamInsts addInertCan addInertEq Adding addLocalFamInst addTcEvBind
    alfi Ambiguity Application applyDefaultingRules Bindings can_eq_nc can_pred
    Can't canClass canEqTyVar canEvNC:cls canEvNC:eq canEvNC:irred canonicalize
    check_type checkExpectedKind checkForConflicts checkMain checkSatisfiability
    checkValidInstance checkValidType complete_matches Constraint cvi
    decideKindGeneralisationPlan Decls deeply_instantiate dischargeFmv
    doClsInstErrorChecks Done doTopReact doTopReact/found Eager Emit Emitting
    End end env2 extendFlatCache Filling finish_tuple flatten flatten_many
    flatten/flat-cache floatEqualities Following found Generalisation
    getNoGivenEqs getUnsolvedInerts Got improveTopFunEqs insertInertCan instance
    instantiating Instantiating instCallConstraints kcTyClGroup kcTyClGroup:
    Kick Linking lk1 matchClass matchClassInst matchFamTcM mk_deflt_at_instance
    mkTypeableBinds New newOpenInferExpType newTcEvBinds newWantedEvVar/cache
    Non quantifyZonkedTyVars reactFunEq reportAllUnsolved reportUnsolved
    reportUnsolved(ambig) rewriteEqEvidence rnd runStage setImplicationStatus
    simplifyAmbiguityCheck simplifyTop simplifyUnits Sneaky solveEqualities
    solveImplication solveNestedImplications solveSimple solveSimpleWanteds
    solveWanteds Start Starting Step tc_def tc_hs_type tc_infer_args
    tc_sub_tc_type tc_sub_type_ds Tc10 Tc11 Tc2 Tc3 Tc3b Tc3c Tc4 Tc4a Tc5 Tc6
    Tc7 Tc7a Tc9 tcAddImplicits tcBody tcCheckId tcDeriving tcExtendIdBndrs
    tcFamInstDecl tcFamTyPats tcImplicitTKBndrs tcInferId tcInstDecl2 tcInstMeth
    tcLocalInstDecl tcMatchesFun tcMethodBody tcPluginInit tcPluginSolve
    tcPluginStop tcPolyCheck tcPolyExpr tcPolyExprNC tcSemigroupWarnings
    tcSkolemise tcSpecPrags tcSubType_NC tcSubTypeDS_O tcTyAndCl tcTyFamInstEqn
    tcTyVar2a tcTyVar2b tcWrapResult try_fundeps txExtendKindEnv
    txExtendKindEnvList type u_tys Unfilled unflatten_eq unflattenFmv
    Unflattening unifyTyVar unifyUnits uom-solve updSolvedSetTcs: utype_defer
    VTA writeMetaTyVar zonkSimples

From this we can search for ``tcPluginSolve`` to find logging from the plugin.

.. code:: pre

    tcPluginSolve start uom-simplify-plugin
    wanted  = [[WD] hole{aaGE} {2}:: (One :: Unit)
                                    ~#
                                    ((Base "s" /: Base "s") :: Unit) (CNonCanonical)]
    tcPluginSolve ok uom-simplify-plugin
    solved = [(CO U(plugin:uom-solve, One, Base "s" /: Base "s")_N,
                [WD] hole{aaGE} {2}:: (One :: Unit)
                                    ~#
                                    ((Base "s" /: Base "s") :: Unit) (CNonCanonical))]
    new    = []
